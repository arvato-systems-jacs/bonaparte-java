import api.*

package api.media XML PROPERTY factoryId 25 {

    /** Defines the format of the data output. */
    enum MediaType {
        // structured output types (record output)
        BONAPARTE = "B", ^XML = "L", JSON = "J", NULL = "N", COMPACT_BONAPARTE = "c", XLS = "X", XLSX="x", CSV = "C", JSONL = "n", YAML = "Y",
        // textual document file output types
        TEXT = "T", HTML="H", XHTML="h", CSS="S", MARKDOWN = "m", TEX = "t", LATEX = "l", URL = "r",
        // binary document output types
        PDF = "P", DVI = "D", POSTSCRIPT = "o", DOCX = "O", PPTX = "q",
        // images
        JPG = "j", PNG = "p", GIF = "g", TIFF = "f", WEBP = "W",
        // vector graphics
        SVG = "V",
        // audio
        WAV = "w", MP3 = "3", FLAC = "F",
        // video
        MPG = "M", MP4 = "4",
        // anything else
        RAW = "#",
        // user defined or undefined
        USER_DEFINED = "U", UNDEFINED = "?",
        // template engines
        FTL = "2",
        // archives
        TAR  = "R",
        ZIP7 = "7",
        ZIP  = "Z",
        GZIP = "z"
    }

    /** Define an associated Xenum to allow extensions. */
    xenum MediaXType is MediaType:1;

    /**
     * Defines an external storage location for a document.
     * The text part of a MediaData structure will contain the URL.
     */
    enum MediaStorageLocation {
        FILE                    = "F",  // file in local file system
        WEB                     = "W",  // publicly accessible data on the web, via unauthorized GET
        S3                      = "S",  // AWS S3
        AZURE                   = "A",  // Azure Blob storage
        GCS                     = "G"   // Google cloud storage
    }

    /** Define an associated Xenum to allow extensions. */
    xenum MediaXStorageLocation is MediaStorageLocation:1;

    enum MediaCategory {
        OTHER                   = "?",  // none of the below
        AUDIO                   = "A",  // audio files, number of channels is unspecified
        VIDEO                   = "V",  // video format: pictures + sound
        IMAGE                   = "I",  // a 2 dimensional picture
        RECORDS                 = "R",  // format suitable to transmit data records
        TEXT                    = "T",  // textual document (not textual data file format)
        DOCUMENT                = "B",  // binary document
        CONTAINER               = "C"   // not really a file type, but an archive of packed file(s)
    }

    enum EnumOutputType {
        DEFAULT="D", TOKEN="T", NAME="N", DESCRIPTION="O"  // description is translated text
    }

    /**
     * The MediaTypeDescriptor provides properties for a given <code>MediaXType</code>, for example the official MIME type,
     * and information if the representation can be considered as text (human readable) or if it is binary data.
     */
    final class MediaTypeDescriptor classId 100 {
        required xenum MediaXType                   mediaType;
        required Ascii(6)                           defaultFileExtension;           // file extension (without a dot)
        required enum MediaCategory                 formatCategory;                 // which type of data is it?
        required boolean                            isText;                         // false = raw data, true = text
        required Ascii(64)                          mimeType;                       // MIME type
        required Ascii(6) List<>                    additionalExtensions;           // more possible file extensions
    }

    /**
     * The MediaData object holds a given document, either as immediate data blob (in text or binary form),
     * or a reference to its storage location (if <code>mediaStorageLocation</code> is not null).
     * The <code>z</code> field is provided to allow additional key / value pairs to be stored.
     */
    final class MediaData classId 101 {
        required xenum MediaXType                   mediaType;                      // defines the content type
        optional Unicode(8000000) allowControlChars text;                           // textual data stored here
        optional Binary(8000000)                    rawData;                        // binary data
        optional Json                               z;                              // variable attributes like encoding / charset, image width / height etc
        optional XEnum MediaXStorageLocation        mediaStorageLocation;           // null for inline data, otherwise the type of storage
    }
}
