package meta {
	default private unsigned trim noControlChars;

    type identifier is Ascii(255);
    
    enum Visibility { DEFAULT, PRIVATE, PROTECTED, PUBLIC }
    enum BundleStatus { UNUSED, RESOLVED, INSTALLED, STARTING, SHUTTING_DOWN, MAINTENANCE }  // borrow OSGi statuses
    enum Multiplicity { SCALAR, ARRAY, LIST, SET, MAP }
    // the DataCategory matches the enum of same name in the Bonaparte DSL generator project
    enum DataCategory { OBJECT, ENUM, NUMERIC, STRING, TEMPORAL, MISC, BINARY }  // misc is boolean, char, uuid, ...
    enum FoldingStrategy { SKIP_UNMAPPED, TRY_SUPERCLASS, FULL_OUTPUT, SUPERCLASS_OR_FULL }  // what to do if no folding mapping is found
    
	abstract immutable class FieldDefinition {
	    enum Visibility         visibility;
		boolean                 isRequired;             // if the fields allow null (if collections: the collection elements)
		required identifier     name;
		enum Multiplicity       multiplicity;
		int                     mapIndexType;
        Integer                 minCount;               // minimum number of occurrences, if a collection or array
		Integer                 maxCount;               // maximum number of occurrences, if a collection or array
        enum DataCategory       dataCategory;           // gives high level information about the data 
        ascii(20)               dataType;               // the Bonaparte data type
        boolean                 isPrimitive;            // true if the field is a primitive data type in Java
        required boolean        isAggregateRequired;    // field is an aggregate field (array, List, Set, Map) and the aggregate itself may not be null 
	}
	
	class ObjectReference extends FieldDefinition {
        boolean                 allowSubclasses;    
		required identifier     objectName;		
	}
	
	// ElementaryDataItem is used for some as well as for types which don't need a parameter
	// day, char, boolean
    class ElementaryDataItem extends FieldDefinition {
    }

    // EnumDataItem represents the special enum type
    class EnumDataItem extends ElementaryDataItem {
        required identifier     enumName;  // PQON of enum
        required Unicode(40) [] values;     // the tokens, if it is alphanumeric enum, with "" for the empty / null token 
    }

    // TemporalElementaryDataItem represents day / timestamp types
    class TemporalElementaryDataItem extends ElementaryDataItem {
        int                     fractionalSeconds;      // decimals fraction of the second (-1 for day)
        boolean                 ^hhmmss;
    }
    
    // BinaryElementaryDataItem represents raw and binary
    class BinaryElementaryDataItem extends ElementaryDataItem {
        int                     length;
    }

    // MiscElementaryDataItem represents some miscellaneous types without attributes (UUID, boolean, Object)
    class MiscElementaryDataItem extends ElementaryDataItem {
    }

    // NumericElementaryDataItem represents all numeric items (float and double and other primitives only fill the isSigned) 
    class NumericElementaryDataItem extends ElementaryDataItem {
        boolean                 isSigned;
        int                     totalDigits;
        int                     decimalDigits;      // number of digits (max) behind the decimal point
        boolean                 rounding;           // if true, parsing numbers with more decimals will result in rounding, if false, an error will be raised
        boolean                 ^autoScale;         // if true, any input will be scaled to the required number of decimal digits
    }

    // AlphanumericElementaryDataItem represents all text based fields
    // ascii, unicode, uppercase, lowercase 
    class AlphanumericElementaryDataItem extends ElementaryDataItem {
        boolean                 doTrim;
        boolean                 doTruncate;
        boolean                 allowControlCharacters;
        boolean                 restrictToAscii;
        int                     length;
        int                     minLength;
        optional Ascii(500)     ^regexp;
    }
	
	class PropertyDefinition {
	   required ascii(80)       id;
	   required Unicode(512)    value;    
	}
	
	// holds all meta information for a class
	class ClassDefinition {
		boolean                 isAbstract;
		boolean                 isFinal;
		required identifier     name;
		Ascii(20)               ^revision;
		identifier              parent;
        identifier              ^bundle;            // OSGi bundle / module
        signed long             serialUID;          // Java serializable serialVersionUID
		int                     numberOfFields;
		optional (FieldDefinition...)[] fields;
        optional (PropertyDefinition) [] ^properties;
        boolean                 propertiesInherited;
		optional Timestamp(3)   whenLoaded;
	}
	
	class BundleInformation {
	    required identifier     name;
        required identifier []  packages;
	    unicode(2048)           classPath;
        enum BundleStatus       bundleStatus;
	    optional Timestamp(3)   whenStatusChanged; 
	}
	
	/** Hold a parsed structure of name[index].subcomponentName[index] */
	class ParsedFoldingComponent {
	    default public;
	    required identifier     fieldname;      // name without any subcomponents
	    // required int           numDescends;    // >= 0 if known, -1 for unknown (allows fast-forward to superclasses)
	    required int            index;          // numeric index, -1 f all elements, 0..n-1 else
	    optional Unicode(255)   alphaIndex;     // alphanumeric index, or null if none exists
	    optional (ParsedFoldingComponent)  component;      // optional specification of the substructure
	}
	
}