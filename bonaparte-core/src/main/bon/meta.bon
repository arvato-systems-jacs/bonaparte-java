/** Bonaparte metadata.
 * Assigned to factoryId 29, classIds 1-40
 * 
 * Other factory IDs:
 * 0: illegal
 * 1..24 reserved for other jpaw projects
 * 25: refs
 * 26: default if nothing assigned
 * 27: adapters
 * 28: framework "twentyeight"
 * 29: bonaparte-core
 * 30ff:  3rd parties 
 */
package meta factoryId 29 {
    default private unsigned trim noControlChars;

    type identifier             is Unicode(255);
    type enumIdType             is Unicode(63);
    type enumTokenType          is Unicode(63);
  
    enum Visibility { DEFAULT, PRIVATE, PROTECTED, PUBLIC }
    enum BundleStatus { UNUSED, RESOLVED, INSTALLED, STARTING, SHUTTING_DOWN, MAINTENANCE }  // borrow OSGi statuses
    enum Multiplicity { SCALAR, ARRAY, LIST, SET, MAP }
    // the DataCategory matches the enum of same name in the Bonaparte DSL generator project
    enum DataCategory { OBJECT, ENUM, NUMERIC, STRING, TEMPORAL, MISC, BINARY, BASICNUMERIC, XENUM, ENUMSET, XENUMSET, ENUMALPHA, ENUMSETALPHA }  // misc is boolean, char, uuid, ...
    enum FoldingStrategy { SKIP_UNMAPPED, TRY_SUPERCLASS, FULL_OUTPUT, SUPERCLASS_OR_FULL, FORWARD_OBJECTS }  // what to do if no folding mapping is found
    enum IndexType { ^NONE, STRING, INTEGER, LONG, SHORT, BYTE }   // index type for enum sets and maps. DO NOT CHANGE SEQUENCE AS ORDINALS ARE USED IN TRANSMISSION!
    
    abstract immutable class FieldDefinition {
        required enum Visibility            visibility;
        required boolean                    isRequired;             // if the fields allow null (if collections: the collection elements)
        required identifier                 name;
        required enum Multiplicity          multiplicity;
        required enum IndexType             mapIndexType;
        optional Integer                    minCount;               // minimum number of occurrences, if a collection or array
        optional Integer                    maxCount;               // maximum number of occurrences, if a collection or array
        required enum DataCategory          dataCategory;           // gives high level information about the data 
        required identifier                 dataType;               // the Bonaparte data type
        required boolean                    isPrimitive;            // true if the field is a primitive data type in Java
        required boolean                    isAggregateRequired;    // field is an aggregate field (array, List, Set, Map) and the aggregate itself may not be null 
    }
    
    class ObjectReference classId 1 extends FieldDefinition {
        required boolean                    allowSubclasses;    
        required identifier                 objectName;     
        optional (ClassDefinition...)       lowerBound;             // if the object must inherit another object, specify it here. null for generic BonaPortables
        optional (ClassDefinition...)       secondaryLowerBound;    // if a secondary object has been provided, the lower bound of that one
        optional Boolean                    secondaryAllowSubclasses;    // if the secondary object type allows subclasses
    }
    
    // ElementaryDataItem is used for some as well as for types which don't need a parameter
    // day, char, boolean
    class ElementaryDataItem classId 2 extends FieldDefinition {
    }

    // EnumDataItem represents the special enum type
    class EnumDataItem classId 3 extends ElementaryDataItem {
        required (EnumDefinition)           baseEnum;
    }

    // XEnumDataItem represents the special xenum type
    class XEnumDataItem classId 4 extends ElementaryDataItem {
        required (XEnumDefinition)          baseXEnum;
    }

    // TemporalElementaryDataItem represents day / timestamp types
    class TemporalElementaryDataItem classId 5 extends ElementaryDataItem {
        required int                        fractionalSeconds;      // decimals fraction of the second (-1 for day)
        required boolean                    ^hhmmss;
    }
    
    // BinaryElementaryDataItem represents raw and binary
    class BinaryElementaryDataItem classId 6 extends ElementaryDataItem {
        required int                        length;
    }

    // MiscElementaryDataItem represents some miscellaneous types without attributes (UUID, boolean)
    class MiscElementaryDataItem classId 7 extends ElementaryDataItem {
    }

    // BasicNumericElementaryDataItem represents all integral numeric items, plus float and double (and their wrappers)
    class BasicNumericElementaryDataItem classId 8 extends ElementaryDataItem {
        required boolean                    isSigned;
        required int                        totalDigits;
        required int                        decimalDigits;      // number of digits (max) behind the decimal point
        required boolean                    rounding;           // if true, parsing numbers with more decimals will result in rounding, if false, an error will be raised
    }
    
    // NumericElementaryDataItem represents decimal
    class NumericElementaryDataItem classId 9 extends BasicNumericElementaryDataItem {
        required boolean                    ^autoScale;         // if true, any input will be scaled to the required number of decimal digits
    }

    // AlphanumericElementaryDataItem represents all text based fields
    // ascii, unicode, uppercase, lowercase
    class AlphanumericElementaryDataItem classId 10 extends ElementaryDataItem {
        required boolean                    doTrim;
        required boolean                    doTruncate;
        required boolean                    allowControlCharacters;
        required boolean                    restrictToAscii;
        required int                        length;
        required int                        minLength;
        optional Ascii(500)                 ^regexp;
    }
    
    // (X)EnumSet definitions
    
    class AlphanumericEnumSetDataItem classId 18 extends AlphanumericElementaryDataItem {
        required (EnumSetDefinition)        baseEnumset;
    }
    class XEnumSetDataItem classId 19 extends AlphanumericElementaryDataItem {
        required (XEnumSetDefinition)       baseXEnumset;
    }
    class NumericEnumSetDataItem classId 20 extends BasicNumericElementaryDataItem {
        required (EnumSetDefinition)        baseEnumset;
    }
    
    
    final immutable class ClassAdapter is java.lang.Class adapter de.jpaw.bonaparte.core.ClassAdapter singleField withExceptionConverter {
        optional identifier                 canonicalName;      // fully qualified name
    }
    
    final immutable class BonaClassAdapter is de.jpaw.bonaparte.core.BonaPortableClass adapter de.jpaw.bonaparte.core.BonaClassAdapter singleField withExceptionConverter {
        optional Long                       key;                // factoryId and classId baked into a single field
    }
    
    // common superclass for class, enum and xenum, enumset, xenumset
    abstract immutable class AbstractObjectParent<E extends AbstractObjectParent<!E>> cacheHash {
        required (ClassAdapter)             classRef;
        required boolean                    isAbstract;
        required boolean                    isFinal;
        required identifier                 name;               // PQON (partially qualified object name)
        optional identifier                 parent;
        optional identifier                 ^bundle;            // OSGi bundle / module
        optional Instant(3)                 whenLoaded;
        optional (!E...)                    parentMeta;         // the meta object for the parent object (if this is an inherited one, else null)
    }
    // holds all meta information for a class
    class ClassDefinition classId 11 extends AbstractObjectParent<ClassDefinition> {
        optional Ascii(20)                  ^revision;
        required signed long                serialUID;          // Java serializable serialVersionUID
        required int                        numberOfFields;
        required (FieldDefinition...) required List<> fields;
        required Unicode(512) required Map<String> ^properties;
        required boolean                    propertiesInherited;
        required int                        ^factoryId;
        required int                        id;
        required int                        rtti;
        required boolean                    isImmutable;        // true if this class has no setters and only final fields
        required boolean                    isFreezable;        // true if this class and all components are either immutable or can be explicitly frozen
    }
    // holds extra meta information for a class which is not a bonaportable, but some external class
    class ExternalClassDefinition classId 17 extends ClassDefinition {
        required boolean                    isSingleField;      // the serialization is done by mapping the field to one existing field. (If false, a replacement object wrapper will be written)
        required boolean                    exceptionConverter; // the unmarshaller possibly throws Exceptions for invalid data which should be enriched with the parsing position
        required identifier                 canonicalName;      // canonical name of the external class (Java type)
        optional identifier                 adapterClassName;   // canonical name of the marshaller adapter (Java type), if there is a separate class
    }
    class EnumDefinition classId 12 extends AbstractObjectParent<EnumDefinition> {
        required signed int                 maxTokenLength;     // signed because we store -1 for enums which do not have tokens at all
        required boolean                    hasNullToken;       // has a token "" (which is converted to null)
        required enumIdType required List<> ids;
        required enumTokenType List<>       tokens;
    }
    class XEnumDefinition classId 14 extends AbstractObjectParent<XEnumDefinition> {
        required signed int                 maxTokenLength;     // signed for symmetry with EnumDefinition
        required boolean                    hasNullToken;       // has a token "" (which is converted to null)
        required (EnumDefinition)           baseEnum;
    }
    class EnumSetDefinition classId 21 extends AbstractObjectParent<EnumSetDefinition> {
        required enum IndexType             indexType;
        required (EnumDefinition)           baseEnum;
    }
    class XEnumSetDefinition classId 22 extends AbstractObjectParent<XEnumSetDefinition> {
        required (XEnumDefinition)          baseXEnum;
    }
    
    class BundleInformation classId 15 {
        required identifier                 name;
        required identifier required List<> packages;
        required unicode(2048)              classPath;
        required enum BundleStatus          bundleStatus;
        optional Instant(3)                 whenStatusChanged; 
    }
    
    /** Hold a parsed structure of name[index].subcomponentName[index] */
    class ParsedFoldingComponent classId 16 {
        default public;
        required identifier                 fieldname;      // name without any subcomponents
        // required int                     numDescends;    // >= 0 if known, -1 for unknown (allows fast-forward to superclasses)
        required int                        index;          // numeric index, -1 f all elements, 0..n-1 else
        optional Unicode(255)               alphaIndex;     // alphanumeric index, or null if none exists
        optional (ParsedFoldingComponent)   component;      // optional specification of the substructure
    }
 
    /** Placeholder class to be used as a default template for a guessed description, used in bonaparte-batch. */   
    abstract class CsvInput {
    }
}