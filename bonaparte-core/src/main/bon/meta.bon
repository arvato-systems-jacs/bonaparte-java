package meta {
	default private unsigned trim noControlChars;

    type identifier is Ascii(255);
    
    enum Visibility { DEFAULT, PRIVATE, PROTECTED, PUBLIC }
    enum BundleStatus { UNUSED, RESOLVED, INSTALLED, STARTING, SHUTTING_DOWN, MAINTENANCE }  // borrow OSGi statuses
    enum Multiplicity { SCALAR, ARRAY, LIST, SET, MAP }
    // the DataCategory matches the enum of same name in the Bonaparte DSL generator project
    enum DataCategory { OBJECT, ENUM, NUMERIC, STRING, TEMPORAL, MISC }  // misc is boolean, binary, char, uuid, ...
    enum FoldingStrategy { SKIP_UNMAPPED, TRY_SUPERCLASS, FULL_OUTPUT }  // what to do if no folding mapping is found
    
	abstract immutable class FieldDefinition {
	    enum Visibility         visibility;
		boolean                 isRequired;
		required identifier     name;
		enum Multiplicity       multiplicity;
		Integer                 maxCount;         // maximum number of occurrences, if ARRAY or LIST
        enum DataCategory       dataCategory;     // gives high level information about the data 
        ascii(20)               dataType;       // the Bonaparte data type
        boolean                 isPrimitive;    // true if the field is a primitive data type in Java 
	}
	
	class ObjectReference extends FieldDefinition {
        boolean                 allowSubclasses;    
		required identifier     objectName;		
	}
	
	// ElementaryDataItem is used for some as well as for types which don't need a parameter
	// day, char, boolean
    class ElementaryDataItem extends FieldDefinition {
    }

    // EnumDataItem represents the special enum type
    class EnumDataItem extends ElementaryDataItem {
        required identifier     enumName;  // HQON of enum
        ascii(39) []            values;
    }

    // MiscElementaryDataItem represents some miscellaneous types
    // timestamp, raw, binary
    class MiscElementaryDataItem extends ElementaryDataItem {
        int                     length;
    }

    // NumericElementaryDataItem represents all numeric items (float and double and other primitives only fill the isSigned) 
    class NumericElementaryDataItem extends ElementaryDataItem {
        boolean                 isSigned;
        int                     totalDigits;
        int                     decimalDigits;      // number of digits (max) behind the decimal point
        boolean                 rounding;           // if true, parsing numbers with more decimals will result in rounding, if false, an error will be raised
        boolean                 ^autoScale;         // if true, any input will be scaled to the required number of decimal digits
    }

    // AlphanumericElementaryDataItem represents all text based fields
    // ascii, unicode, uppercase, lowercase 
    class AlphanumericElementaryDataItem extends ElementaryDataItem {
        boolean                 doTrim;
        boolean                 doTruncate;
        boolean                 allowControlCharacters;
        int                     length;
        int                     minLength;
        optional Ascii(500)     ^regexp;
    }
	
	class PropertyDefinition {
	   required ascii(80) id;
	   required Unicode(512) value;    
	}
	
	// holds all meta information for a class
	class ClassDefinition {
		boolean isAbstract;
		boolean isFinal;
		required identifier name;
		Ascii(20) ^revision;
		identifier parent;
        identifier ^bundle;  // OSGi bundle / module
        signed long serialUID;      // Java serializable serialVersionUID
		int numberOfFields;
		optional (FieldDefinition...)[] fields;
        optional (PropertyDefinition) [] ^properties;
        boolean propertiesInherited;
		optional Timestamp(3) whenLoaded;
	}
	
	class BundleInformation {
	    required identifier name;
        required identifier [] packages;
	    unicode(255) classPath;
        enum BundleStatus bundleStatus;
	    optional Timestamp(3) whenStatusChanged; 
	}
	
	/** Hold a parsed structure of name[index].subcomponentName[index] */
	class ParsedFoldingComponent {
	    default public;
	    required identifier                fieldname;      // name without any subcomponents
	    // required int                       numDescends;    // >= 0 if known, -1 for unknown (allows fast-forward to superclasses)
	    required int                       index;          // numeric index, -1 f all elements, 0..n-1 else
	    optional Unicode(255)              alphaIndex;     // alphanumeric index, or null if none exists
	    optional (ParsedFoldingComponent)  component;      // optional specification of the substructure
	}
	
}