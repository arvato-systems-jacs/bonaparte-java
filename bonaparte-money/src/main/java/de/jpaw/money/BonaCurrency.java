package de.jpaw.money;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Currency;

/** Class to store the notion of a currency, with the option to override the number of decimals (fractional digits).
 * By default, the number of decimals corresponds to the one of the real currency as defined by ISO 4217. 
 */
public final class BonaCurrency implements Serializable {
    private static final long serialVersionUID = -6269291861207854200L;

    /**
     * Defines the maximum allowable number of decimal digits for monetary amounts. The maximum used by a real currency is 3 (TND and other Dinars), but we
     * allow for 6 in order to support potential virtual currencies as well as unit values with a higher precision.
     */
    public static final int MAX_DECIMALS = 6;

    /**
     * A string which defines the currency in a human readable form. It has always 3 letters and must match the ISO 4217 code in case of real currencies.
     * 
     */
    private final String currencyCode;

    private final int decimals;

    public BonaCurrency(String currencyCode, int decimals) throws MonetaryException {
        if ((decimals < 0) || (decimals > MAX_DECIMALS)) {
            throw new MonetaryException(MonetaryException.ILLEGAL_NUMBER_OF_DECIMALS);
        }
        if ((currencyCode == null) || (currencyCode.length() != 3)) {
            throw new MonetaryException(MonetaryException.ILLEGAL_CURRENCY_CODE);
        }
        if (!currencyCode.equals(currencyCode.toUpperCase())) {
            throw new MonetaryException(MonetaryException.ILLEGAL_CURRENCY_CODE);
        }
        this.decimals = decimals;
        this.currencyCode = currencyCode;
    }

    public BonaCurrency(String currencyCode4217) throws MonetaryException {
        if ((currencyCode4217 == null) || (currencyCode4217.length() != 3)) {
            throw new MonetaryException(MonetaryException.ILLEGAL_CURRENCY_CODE);
        }
        if (!currencyCode4217.equals(currencyCode4217.toUpperCase())) {
            throw new MonetaryException(MonetaryException.ILLEGAL_CURRENCY_CODE);
        }
        this.currencyCode = currencyCode4217;

        int digits = Currency.getInstance(currencyCode4217).getDefaultFractionDigits();
        this.decimals = (digits < 0 || digits > MAX_DECIMALS) ? MAX_DECIMALS : digits;
    }

    
    /** scale the provided amount to the scale as defined in this currency. */
    public BigDecimal scale(BigDecimal amount, RoundingMode roundingMode) throws MonetaryException {
        if (amount.scale() == decimals)
            return amount;  // unchanged, shortcut
        try {
            return amount.setScale(decimals, roundingMode);
        } catch (ArithmeticException e) {
            throw new MonetaryException(MonetaryException.ROUNDING_PROBLEM);
        }
    }
    
    public String toShortString() {
        return currencyCode + ":" + decimals;
    }
    
    // default Eclipse autogenerated methods below

    public String getCurrencyCode() {
        return currencyCode;
    }

    public int getDecimals() {
        return decimals;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = (prime * result) + ((currencyCode == null) ? 0 : currencyCode.hashCode());
        result = (prime * result) + decimals;
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        BonaCurrency other = (BonaCurrency) obj;
        if (currencyCode == null) {
            if (other.currencyCode != null) {
                return false;
            }
        } else if (!currencyCode.equals(other.currencyCode)) {
            return false;
        }
        if (decimals != other.decimals) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "CustomCurrency [currencyCode=" + currencyCode + ", decimals=" + decimals + "]";
    }

}