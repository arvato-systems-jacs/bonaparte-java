package tests1 Ext {
    type countryCode is uppercase(3);
    enum Color { RED, GREEN, BLUE }
    enum AlphaColor { RED="R", GREEN="G", BLUE="B" }
    enum VariableLength { ONE="1", NULL="", LONG = "This is a long text" }
    enum VariableLengthUnicode { UMLAUT="Jäh!", EURO="€" }
     
    class Primitives orderedBy (int1, char1, boolean1) {
        byte byte1;
        short short1;
        int int1;
        integer int2;
        long long1;
        boolean boolean1;
        float float1;
        double double1;
        char char1;
        character char2;
    }
    // same class, but no explicit externalization code
    class PrimitivesS noExt {
        byte byte1;
        short short1;
        int int1;
        integer int2;
        long long1;
        boolean boolean1;
        float float1;
        double double1;
        char char1;
        character char2;
    }
    class BoxedTypes orderedBy (byte1, char1) {
        Byte byte1;
        Short short1;
        Int int1;
        Integer int2;
        Long long1;
        Boolean boolean1;
        Float float1;
        Double double1;
        Char char1;
        Character char2;
    }
    // same class, but no explicit externalization code
    class BoxedTypesS noExt {
        Byte byte1;
        Short short1;
        Int int1;
        Integer int2;
        Long long1;
        Boolean boolean1;
        Float float1;
        Double double1;
        Char char1;
        Character char2;
    }
    class PrimitiveArrays {
        byte [] byte1;
        short [] short1;
        int [] int1;
        integer [] int2;
        long [] long1;
        boolean [] boolean1;
        float [] float1;
        double [] double1;
        char [] char1;
        character [] char2;
    }
    class BoxedTypeArrays {
        Byte [] byte1;
        Short [] short1;
        Int [] int1;
        Integer [] int2;
        Long [] long1;
        Boolean [] boolean1;
        Float [] float1;
        Double [] double1;
        Char [] char1;
        Character [] char2;
    }
    class OtherTypes BeanVal orderedBy (color1, unicode1, day1, myUuid, decimal1) {
        raw(1000000) raw1;
        binary(1000000) binary1;
        day day1;
        timestamp(0) timestamp1;
        timestamp(3) timestamp2;
        time(0) time1;
        time(3) time2;
        ascii(30) ascii1;
        unicode(30) unicode1;
        number(4) number1;
        decimal(14,2) decimal1;
        enum Color color1;
        enum AlphaColor color2;
        enum VariableLength varEnum1;
        enum VariableLengthUnicode varEnum2;
        uuid myUuid;
        uppercase(2..2) countryCode;
        Ascii(2..5) regexp "[a-z][a-z](_[A-Z][A-Z])?" languageCode;
        timestamp(0) hhmmss timestamp1a;
        timestamp(3) hhmmss timestamp2a;
        time(0) hhmmss time1a;
        time(3) hhmmss time2a;
    }
    class Instants {
        Instant i1;
        Instant(0) i2;
        Instant(3) i3;
    }
    class References orderedBy (country, classOrDerivedObject) {
        object someGenericRecord;
        Object someOtherGenericRecord;
        countryCode country;
        (Primitives) preciseRef;
        (Primitives...) classOrDerivedObject;
    }
    class Parameters {
        ascii(80) trim     testTrim;
        ascii(80) notrim   testNoTrim;
        ascii(20) truncate testTruncate;
        ascii(20) trim     testNoTruncate;
    }
    class Lists {
        ascii(10) List<>   textList;
        Integer List<>         intList;
        Ascii(8) List <4>  optionalList;
        (Primitives) List<> listOfObjects;
    }
    
//  needs additional dependency bonaparte-xml
//    class XmlTest XML FIELD {
//        ascii(20)          name;
//        int                age;
//    }
    
    class UnicodeTest {
        Unicode(10) allowControlChars string1; 
        Unicode(10) noControlChars    string2; 
    }
    
    class NoRounding {
        signed Decimal(14,2) sum;
        signed Decimal(14,2) [] elements;
    }
    
    class TestBigInteger {
        Number(38)      bignum;
    }
}