package jsonTest {

    class TestObj {
        int                 primitiveInt;
        Long                wrappedLong;
        Day                 myDay;
        Instant             myInstant;
        Unicode(20)         myText;
        Boolean             myBoolean;
        Uuid                myNull;
    }

    final class TestTS {
        Timestamp(0)        ts0;
        Timestamp(3)        ts3;
    }

    final class TestT {
        Time(0)             t0;
        Time(3)             t3;
    }

    class TestSimple {
        int                 num;
        Unicode(20)         text;
    }

    class JsonFieldTest {
        Unicode(20)         text;
        Json                varStuff;
        Element             varField;
        element List<>      varList;
        array               varList2;
        Array               optList2;
        // Array List<>        listOfList2;
    }

    enum ColorNum   { RED, GREEN, BLUE }
    enum ColorAlnum { RED="R", GREEN = "G", BLUE="B" }
    xenum XColor is ColorAlnum:1;

    class JsonEnumAndList {
        enum ColorNum           cn;
        enum ColorAlnum         ca;
        xenum XColor            cx;
        Element                 any;
    }

    class WrapperForJsonEnumAndList {
        required (JsonEnumAndList)  obj;
    }

    class JsonWithMap {
        enum ColorAlnum         en;
        Unicode(20) Map<String> map;
        int                     num;
    }
    class Json2WithMap {
        enum ColorAlnum         en;
        Integer Map<String>     map;
        int                     num;
    }
    class JsonWithMapOfObjects {
        enum ColorAlnum         en;
        (TestObj) Map<String>   map;
        int                     num;
    }

    class JsonWithList {
        Integer         List<>          ciList;
        int                             num1;
        Unicode(20)     List<>          caList;
        int                             num2;
    }
    class JsonWithListOfEnums {
        enum ColorNum   List<>          cnList;
        int                             num1;
        enum ColorAlnum List<>          caList;
        int                             num2;
    }
    class JsonWithStringMap {
        Integer         Map<String>     ciMap;
        int                             num1;
        Unicode(20)     Map<String>     caMap;
        int                             num2;
    }
    class JsonWithStringMapOfEnums {
        enum ColorNum   Map<String>     cnMap;
        int                             num1;
        enum ColorAlnum Map<String>     caMap;
        int                             num2;
    }
    class JsonWithLongMap {
        Integer         Map<Long>       ciMap;
        int                             num1;
        Unicode(20)     Map<Long>       caMap;
        int                             num2;
    }
    class JsonWithLongMapOfEnums {
        enum ColorNum   Map<Long>       cnMap;
        int                             num1;
        enum ColorAlnum Map<Long>       caMap;
        int                             num2;
    }
    class JsonWithIntegerMap {
        Integer         Map<Integer>    ciMap;
        int                             num1;
        Unicode(20)     Map<Integer>    caMap;
        int                             num2;
    }
    class JsonWithIntegerMapOfEnums {
        enum ColorNum   Map<Integer>    cnMap;
        int                             num1;
        enum ColorAlnum Map<Integer>    caMap;
        int                             num2;
    }

    // additions for enumsets
    enumset  ColorNumSet   is ColorNum;
    enumset  ColorAlnumSet is ColorAlnum;
    xenumset XColorSet     is XColor;

    class JsonEnumSets {
        enumset ColorNumSet           cn;
        enumset ColorAlnumSet         ca;
        xenumset XColorSet(10)        cx;
        // used for empty sets
        enumset ColorNumSet           cn2;
        enumset ColorAlnumSet         ca2;
        xenumset XColorSet(10)        cx2;
        // used for nulls
        Enumset ColorNumSet           cn3;
        Enumset ColorAlnumSet         ca3;
        XEnumset XColorSet(10)        cx3;
    }

    class WrapperForJsonEnumSets {
        required (JsonEnumSets)       obj;
    }
}
