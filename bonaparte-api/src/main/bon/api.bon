import meta.*

package api factoryId 25 {
    default private unsigned trim noControlChars;

    /** Base class for all DTOs which can be stored in some key/value store and have a primitive or wrapped long
     * primary key, either surrogate or derived by composing natural key fields.
     */
    abstract class AbstractRef refp "" {}

    /** Class to indicate non existing References. */
    final class VoidRef classId 99 extends AbstractRef
       refp "0L"
       keyp "new VoidRef()" {
    }

    /** Base class for all audit information. Any other audit data holding class should inherit this one.
     * If tracking is not present, the returned data should be null, therefore this class has been made abstract.
     */
    abstract class TrackingBase {}

    /** A tracking class which only tracks creation time. */
    class WriteTracking classId 10 extends TrackingBase {
        required Instant                            whenCreated;
    }

    /** A tracking class which tracks creation as well as update time. */
    class ReadWriteTracking classId 11 extends TrackingBase {
        required Instant                            whenCreated;
        optional Instant                            whenUpdated;            // null if the record is in its initial state, or the modification time otherwise
    }


    /** Class which contains the DTO component as well as the audit data. In addition, possible tenant information is provided.
     * The DTO part contains all information which is actively maintained by the application, the tracking part all data which
     * is updated automatically, such as timestamps and versions.
     */
    final class DataWithTracking<DATA, TRACKING extends TrackingBase> classId 12 {
        required (!DATA...)                         data;                   // the actual data
        optional (!TRACKING...)                     ^tracking;              // audit data, if it exists
    }

    /**
     * Defines the various implementations of the persistence providers.
     * The main purpose of this enum is to ensure that the assigned IDs are unique within the application.
     * The actual enum is only used by the implementations.
     */
    enum PersistenceProviders {
        JPA, TERRACOTTA, HAZELCAST, INFINISPAN, MAPDB, MESSAGING, UNUSED, AEROSPIKE, OFFHEAPMAP, OPENHFT
    }

    /** Search related types. */

    final class SortColumn classId 20 {
        required identifier                         fieldName;
        required boolean                            descending;
    }

    /** Combines one or multiple field specific predicates. */
    abstract class SearchFilter {
    }

    /** Combines multiple predicates by AND. */
    final class AndFilter classId 21 extends SearchFilter {
        required (SearchFilter...)                  filter1;
        required (SearchFilter...)                  filter2;
    }

    /** Combines multiple predicates by OR. */
    final class OrFilter classId 23 extends SearchFilter {
        required (SearchFilter...)                  filter1;
        required (SearchFilter...)                  filter2;
    }

    /** Negates a filter. */
    final class NotFilter classId 22 extends SearchFilter {
        required (SearchFilter...)                  filter;
    }

    /** Base class for all field specific filters. */
    abstract class FieldFilter extends SearchFilter {
        required identifier                         fieldName;                              // the field name subject to comparison
    }

    /** Provides filtering for NULL fields. The result set consists of all rows which have a NULL value for the specified column.
     * To select all rows with a NOT NULL value, set the "negateResult" field of the FieldFilter base class to true.
     */
    final class NullFilter classId 24 extends FieldFilter {
    }

    /** Provides filtering for boolean values. The result set is the subset of all rows which have the same boolean setting for the given field. */
    final class BooleanFilter classId 25 extends FieldFilter {
        required boolean                            booleanValue;
    }

    /** Provides filtering for ASCII text fields (IDs, tokens). Exactly one of the parameters equalsValue and likeValue must be provided, the other one must be null.
     * If both parameters are null or both are not equal to null, an "invalid search filter" parameter error is returned. */
    final class AsciiFilter classId 26 extends FieldFilter {
        optional Ascii(80)                          equalsValue;
        optional Ascii(80)                          lowerBound;
        optional Ascii(80)                          upperBound;
        optional Ascii(80)                          likeValue;
        required Ascii(80) List<>                   valueList;
    }

    /** Provides filtering for Unicode text fields (IDs, tokens). Exactly one of the parameters equalsValue and likeValue must be provided, the other one must be null.
     * If both parameters are null or both are not equal to null, an "invalid search filter" parameter error is returned. */
    final class UnicodeFilter classId 27 extends FieldFilter {
        optional Unicode(80)                        equalsValue;
        optional Unicode(80)                        lowerBound;
        optional Unicode(80)                        upperBound;
        optional Unicode(80)                        likeValue;
        required Unicode(80) List<>                 valueList;
    }

    /** Provides filtering for integral values. Exactly one of the fields must be not null.
     */
    final class IntFilter classId 28 extends FieldFilter {
        optional Integer                            equalsValue;
        optional Integer                            lowerBound;
        optional Integer                            upperBound;
        required Integer List<>                     valueList;
    }

    /** Provides filtering for integral values. Exactly one of the fields must be not null.
     */
    final class LongFilter classId 29 extends FieldFilter {
        optional Long                               equalsValue;
        optional Long                               lowerBound;
        optional Long                               upperBound;
        required Long List<>                        valueList;
    }
    
    /** Provides filtering for fractional values with 6 decimals. Exactly one of the fields must be not null.
     */
    final class DecimalFilter classId 34 extends FieldFilter {
        optional Decimal(18,6)                      equalsValue;
        optional Decimal(18,6)                      lowerBound;
        optional Decimal(18,6)                      upperBound;
        required Decimal(18,6) List<>               valueList;
    }
    
    /** Provides filtering for calendar dates (full days).
     */
    final class DayFilter classId 30 extends FieldFilter {
        optional Day                                equalsValue;
        optional Day                                lowerBound;
        optional Day                                upperBound;
        required Day List<>                         valueList;
    }

    /** Provides filtering for local date / time. All parameters are provided in UTC timezone.
     */
    final class TimestampFilter classId 31 extends FieldFilter {
        optional Timestamp(0)                       equalsValue;
        optional Timestamp(0)                       lowerBound;
        optional Timestamp(0)                       upperBound;
        required Timestamp(0) List<>                valueList;
    }

    /** Provides filtering for time instants. All parameters are provided in UTC timezone.
     */
    final class InstantFilter classId 32 extends FieldFilter {
        optional Instant(3)                         equalsValue;
        optional Instant(3)                         lowerBound;
        optional Instant(3)                         upperBound;
        required Instant(3) List<>                  valueList;
    }

    /** Provides filtering for time elements. All parameters are provided in local timezone.
     */
    final class TimeFilter classId 33 extends FieldFilter {
        optional Time(0)                            equalsValue;
        optional Time(0)                            lowerBound;
        optional Time(0)                            upperBound;
        required Time(0) List<>                     valueList;
    }
}
