import api.*

package api.auth factoryId 25 {

    enumset<int>    Permissionset       is OperationType;   // compact storage (2 bytes in Bonaparte compact format)
    enumset<String> PermissionsetAlpha  is OperationType;   // readable format
    
    enum UserLogLevelType {
        STEALTH,                // neither session nor any request
        SESSION_ONLY,           // only session statistics
        SESSION_WITH_COUNTS,    // sessions and updated access counts
        MESSAGE_ENTRY,          // message, but without serialized request and response
        REQUESTS,               // message, with serialized requests, but no responses
        FULL                    // requests and responses
    }
    
    /** A useful enum to access the map entries of a JWT token by instance.name(). */
    enum JwtFieldName {
        ISSUER                  = "iss",
        SUBJECT                 = "sub",        // user ID
        EXPIRATION              = "exp",
        NOT_BEFORE              = "nbf",
        ISSUED_AT               = "iat",
        JSON_TOKEN_IDENTIFIER   = "jti",
        NAME                    = "name",       // real name of the subject
        LOCALE                  = "locale",     // IETF BCP 47 language tag
        ZONEINFO                = "zoneinfo",   // time zone
        SESSION_REF             = "s",
        TENANT_REF              = "t",
        USER_REF                = "u",
        ROLE_REF                = "r",
        LOG_LEVEL_OK            = "l",
        LOG_LEVEL_ERR           = "e",
        PERMISSION_FILTER       = "p",
        PERMISSION_MIN          = "pl",
        PERMISSION_MAX          = "pu"
    }
    
    // JSON Web Token as per https://tools.ietf.org/html/rfc7519
    final class Jwt classId 17 {
        required (JwtAlg)               alg;
        required (JwtPayload...)        payload;
        required Binary(32)             sig;        // use a zero byte length signature for alg = none
    }
    
    final class JwtAlg classId 18 {
        required Ascii(3)               typ;        // "JWT"
        required Ascii(16)              alg;        // usually not more than 5 ("HS256"...), but more in case of encrpyted JWTs
        optional Ascii(3)               cty;        // content type
    }
    
    class JwtPayload classId 19 {
        optional Unicode(255)           iss;        // issuer
        optional Unicode(255)           sub;        // subject (user ID)
        optional Unicode(255)           aud;        // audience
        optional Instant                exp;        // expiration (time)
        optional Instant                nbf;        // not before
        optional Instant                iat;        // issued at
        optional Unicode(40)            jti;        // JSON token identifier (unique ID)
        
        // commonly used fields...
        optional Unicode(255)           name;       // user name (user real world name)
        optional languageTag            locale;     // IETF BCP47 language tag (ISO639-A2, plus optional "-" and then ISO3166-A2)
        optional Ascii(64)              zoneinfo;   // IANA 2015g or later time zone info string

        // fields used by this implementation... (references are internal numeric keys)
        optional Long                   s;          // session reference
        optional Long                   t;          // tenant reference
        optional Long                   u;          // user reference
        optional Long                   r;          // role restriction / reference
        optional Enum UserLogLevelType  l;          // log level for messages processed OK
        optional Enum UserLogLevelType  e;          // log level for messages processed with error return (if different)
        optional Unicode(255)           p;          // permission resource restriction. If defined, then only access to this resource is allowed.
        optional Enumset Permissionset  pl;         // minimum permissions (lower bound, set always allowed)
        optional Enumset Permissionset  pu;         // maximum permissions (upper bound, permissions not in this set are never allowed)
    }
}
